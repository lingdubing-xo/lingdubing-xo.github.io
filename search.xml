<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo配置live2d看板娘</title>
    <url>/2025/02/05/hexo%E9%85%8D%E7%BD%AElive2d%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h4><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览</button><div class="hide-content"><p>这里有张图片：<br><img src="https://cdn.statically.io/gh/lingdubing-xo/lingdubing-xo-pic/main/%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AElive2d%E7%9C%8B%E6%9D%BF%E5%A8%98/seven.png" alt="image (1)" style="zoom:67%;" /></p>
</div></div>
<h1 id="0-用到的地址"><a href="#0-用到的地址" class="headerlink" title="0.用到的地址"></a>0.用到的地址</h1><p>(<strong>oh-my-live2d Github 地址</strong>)[<a href="https://github.com/oh-my-live2d/oh-my-live2d">https://github.com/oh-my-live2d/oh-my-live2d</a>]<br>(<strong>oh-my-live2d 官网 地址</strong>)[<a href="https://oml2d.hacxy.cn/">https://oml2d.hacxy.cn/</a>]<br>(<strong>live2d 模型下载 地址</strong>)[<a href="https://github.com/Eikanya/Live2d-model/tree/master">https://github.com/Eikanya/Live2d-model/tree/master</a>]<br>(<strong>静态文件 Statically 地址</strong>)[<a href="https://statically.io/convert/">https://statically.io/convert/</a>]<br>(<strong>DownGit Github 文件夹下载器 地址</strong>)[<a href="https://minhaskamal.github.io/DownGit/#/home">https://minhaskamal.github.io/DownGit/#/home</a>]</p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><div class="note info simple"><p>需搭配 Hexo 使用，我目前使用的 hexo 版本为 <wavy>7.3.0</wavy>，教程很简单，可能需要自备魔法</p>
</div>
<div class="note primary modern"><p>我使用的是 <wavy>hexo-oh-my-live2d</wavy>，可能有的人之前使用的是 hexo-live2d-helper，但是由于这个 helper 不再维护了，支持的模型较少。<br>所以我们采用这个新的库，它正在积极维护且支持所有模型<br>视频教程在<emp><a href="https://www.bilibili.com/video/BV1ptPkebEqZ/?spm_id_from=333.1387.homepage.video_card.click">https://www.bilibili.com/video/BV1ptPkebEqZ/?spm_id_from=333.1387.homepage.video_card.click</a></emp></p>
</div>
<h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h1><h3 id="1-安装-hexo-oh-my-live2d-插件"><a href="#1-安装-hexo-oh-my-live2d-插件" class="headerlink" title="1. 安装 hexo-oh-my-live2d 插件"></a>1. 安装 hexo-oh-my-live2d 插件</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 在 hexo 根目录 <span class="built_in">cmd</span> 下输入如下命令</span><br><span class="line"># 这里使用的是yarn命令，跟npm命令起到的效果是一样的</span><br><span class="line">yarn add hexo-oh-my-live2d --save</span><br></pre></td></tr></table></figure>
<h3 id="2-配置样式文件"><a href="#2-配置样式文件" class="headerlink" title="2. 配置样式文件"></a>2. 配置样式文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这hexo的config.yml文件下增添以下内容</span></span><br><span class="line"><span class="comment"># 下面的path路径即为你想要使用模型的model地址</span></span><br><span class="line"><span class="comment"># live2d看板娘</span></span><br><span class="line"><span class="attr">OhMyLive2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">CDN:</span> <span class="string">https://registry.npmmirror.com/oh-my-live2d/latest/files</span></span><br><span class="line">  <span class="comment"># CDN: https://registry.npmmirror.com/oh-my-live2d/0.13/files/dist/index.min.js</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">    <span class="comment"># importType: &#x27;cubism2&#x27; #  导入类型, 默认使用全量导入: complete , 可选值: complete, cubism2, cubism5</span></span><br><span class="line">    <span class="attr">libraryUrls:</span> <span class="comment"># 自定义 Cubism SDK 外部资源地址</span></span><br><span class="line">      <span class="attr">complete:</span> <span class="string">https://registry.npmmirror.com/oh-my-live2d/latest/files/lib/complete.js</span></span><br><span class="line">      <span class="attr">cubism2:</span> <span class="string">https://registry.npmmirror.com/oh-my-live2d/latest/files/lib/cubism2.js</span></span><br><span class="line">      <span class="attr">cubism5:</span> <span class="string">https://registry.npmmirror.com/oh-my-live2d/latest/files/lib/cubism5.js</span></span><br><span class="line">    <span class="comment"># menus:</span></span><br><span class="line">    <span class="comment"># items: |</span></span><br><span class="line">    <span class="comment">#   (defaultItems)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">#    return [</span></span><br><span class="line">    <span class="comment">#      ...defaultItems,</span></span><br><span class="line">    <span class="comment">#      &#123;</span></span><br><span class="line">    <span class="comment">#        id: &#x27;github&#x27;,</span></span><br><span class="line">    <span class="comment">#        icon: &#x27;github-fill&#x27;,</span></span><br><span class="line">    <span class="comment">#        title: &#x27;我的github&#x27;,</span></span><br><span class="line">    <span class="comment">#        onClick: ()=&gt;window.open(&#x27;https://github.com/hacxy&#x27;)</span></span><br><span class="line">    <span class="comment">#      &#125;</span></span><br><span class="line">    <span class="comment">#    ]</span></span><br><span class="line">    <span class="comment">#   &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># items:</span></span><br><span class="line">    <span class="comment">#   - id: &#x27;github&#x27;</span></span><br><span class="line">    <span class="comment">#     icon: &#x27;github-fill&#x27;</span></span><br><span class="line">    <span class="comment">#     title: &#x27;我的github&#x27;</span></span><br><span class="line">    <span class="comment">#     onClick: ()=&gt;window.open(&#x27;https://github.com/hacxy&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">mobileDisplay:</span> <span class="literal">false</span> <span class="comment"># 是否在移动端显示</span></span><br><span class="line">    <span class="attr">models:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;https://cdn.statically.io/gh/lingdubing-xo/lingdubing-xo-pic/main/%E5%8A%A0%E8%97%A4%E6%83%A0live2d/model/katou_01/katou_01.model.json&quot;</span></span><br><span class="line">        <span class="attr">mobilePosition:</span> [<span class="number">-10</span>, <span class="number">23</span>] <span class="comment"># 移动端时模型在舞台中的位置。 默认值: [0,0] [横坐标, 纵坐标]</span></span><br><span class="line">        <span class="attr">mobileScale:</span> <span class="number">0.1</span> <span class="comment"># 移动端时模型的缩放比例 默认值: 0.1</span></span><br><span class="line">        <span class="attr">mobileStageStyle:</span> <span class="comment"># 移动端时舞台的样式</span></span><br><span class="line">          <span class="attr">width:</span> <span class="number">180</span></span><br><span class="line">          <span class="attr">height:</span> <span class="number">166</span></span><br><span class="line">        <span class="attr">motionPreloadStrategy:</span> <span class="string">IDLE</span> <span class="comment"># 动作预加载策略 默认值: IDLE 可选值: ALL | IDLE | NONE</span></span><br><span class="line">        <span class="attr">position:</span> [<span class="number">20</span>, <span class="number">-150</span>] <span class="comment"># 模型在舞台中的位置。 默认值: [0,0] [横坐标, 纵坐标]</span></span><br><span class="line">        <span class="attr">scale:</span> <span class="number">0.15</span> <span class="comment"># 模型的缩放比例 默认值: 0.1</span></span><br><span class="line">        <span class="comment"># showHitAreaFrames: true # 是否显示点击区域 默认值: false</span></span><br><span class="line">        <span class="attr">stageStyle:</span></span><br><span class="line">          <span class="attr">width:</span> <span class="number">250</span></span><br><span class="line">          <span class="attr">height:</span> <span class="number">250</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;https://cdn.statically.io/gh/lingdubing-xo/lingdubing-xo-pic/main/%E7%BA%B1%E9%9B%BElive2d/model/sagiri/sagiri.model.json&quot;</span></span><br><span class="line">        <span class="attr">scale:</span> <span class="number">0.12</span></span><br><span class="line">        <span class="attr">position:</span> [<span class="number">30</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="attr">stageStyle:</span></span><br><span class="line">          <span class="attr">width:</span> <span class="number">250</span></span><br><span class="line">        <span class="attr">mobileScale:</span> <span class="number">0.08</span></span><br><span class="line">        <span class="attr">mobilePosition:</span> [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        <span class="attr">mobileStageStyle:</span> <span class="comment"># 移动端时舞台的样式</span></span><br><span class="line">          <span class="attr">width:</span> <span class="number">180</span></span><br><span class="line">    <span class="attr">parentElement:</span> <span class="string">document.body</span> <span class="comment">#为组件提供一个父元素，如果未指定则默认挂载到 body 中</span></span><br><span class="line">    <span class="attr">primaryColor:</span> <span class="string">&quot;var(--btn-bg)&quot;</span> <span class="comment"># 主题色 支持变量</span></span><br><span class="line">    <span class="attr">sayHello:</span> <span class="literal">false</span> <span class="comment"># 是否在初始化阶段打印项目信息</span></span><br><span class="line">    <span class="attr">tips:</span></span><br><span class="line">      <span class="attr">style:</span></span><br><span class="line">        <span class="attr">width:</span> <span class="number">230</span></span><br><span class="line">        <span class="attr">height:</span> <span class="number">120</span></span><br><span class="line">        <span class="attr">left:</span> <span class="string">calc(50%</span> <span class="bullet">-</span> <span class="string">20px)</span></span><br><span class="line">        <span class="attr">top:</span> <span class="string">-100px</span></span><br><span class="line">      <span class="attr">mobileStyle:</span></span><br><span class="line">        <span class="attr">width:</span> <span class="number">180</span></span><br><span class="line">        <span class="attr">height:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">left:</span> <span class="string">calc(50%</span> <span class="bullet">-</span> <span class="string">30px)</span></span><br><span class="line">        <span class="attr">top:</span> <span class="string">-100px</span></span><br><span class="line">      <span class="attr">idleTips:</span></span><br><span class="line">        <span class="attr">interval:</span> <span class="number">15000</span></span><br><span class="line">        <span class="comment"># message:</span></span><br><span class="line">        <span class="comment">#   - 你好呀~</span></span><br><span class="line">        <span class="comment">#   - 欢迎来到我的小站~</span></span><br><span class="line">        <span class="comment"># 自定义提示语 需要 引入 axios 库 ,也可以使用其他方法</span></span><br><span class="line">        <span class="attr">message:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          function()&#123;</span></span><br><span class="line"><span class="string">            return axios.get(&#x27;https://v1.hitokoto.cn?c=i&#x27;)</span></span><br><span class="line"><span class="string">              .then(function (response) &#123;</span></span><br><span class="line"><span class="string">                return response.data.hitokoto ;</span></span><br><span class="line"><span class="string">              &#125;)</span></span><br><span class="line"><span class="string">              .catch(function (error) &#123;</span></span><br><span class="line"><span class="string">                console.error(error);</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string"></span>        <span class="comment"># wordTheDay: true</span></span><br><span class="line">        <span class="comment"># 自定义  https://v1.hitokoto.cn  数据</span></span><br><span class="line">        <span class="comment"># wordTheDay: |</span></span><br><span class="line">        <span class="comment">#   function(wordTheDayData)&#123;</span></span><br><span class="line">        <span class="comment">#     return `$&#123;wordTheDayData.hitokoto&#125;    by.$&#123;wordTheDayData.from&#125;`;</span></span><br><span class="line">        <span class="comment">#   &#125;</span></span><br><span class="line">  <span class="comment"># then: |</span></span><br><span class="line">  <span class="comment">#   (oml2d)=&gt;&#123;</span></span><br><span class="line">  <span class="comment">#      setTimeout(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">#     oml2d.tipsMessage(&#x27;hello world&#x27;, 3000, 10);</span></span><br><span class="line">  <span class="comment">#   &#125;, 8000);</span></span><br><span class="line">  <span class="comment">#   &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-配置-github-资源床"><a href="#3-配置-github-资源床" class="headerlink" title="3.配置 github 资源床"></a>3.配置 github 资源床</h3><p><strong>1.进入到 github 官网上创建一个<wavy>公开的</wavy>项目</strong><br><strong>2.将 github 创建的项目拉到本地，在本地创建一个存储文件的文件夹</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># github拉到本地</span><br><span class="line">git pull 仓库位置</span><br></pre></td></tr></table></figure>
<h3 id="4-下载想要的模型"><a href="#4-下载想要的模型" class="headerlink" title="4.下载想要的模型"></a>4.下载想要的模型</h3><p>到(<strong>live2d 模型下载 地址</strong>)[<a href="https://github.com/Eikanya/Live2d-model/tree/master]下载想要的模型">https://github.com/Eikanya/Live2d-model/tree/master]下载想要的模型</a><br><strong>要是压缩包直接下载到本地即可，有些模型是文件夹格式的直接下载不下来的话，可以使用(DownGit 工具)[<a href="https://minhaskamal.github.io/DownGit/#/home]将文件夹的地址复制上去然后下载，保存到刚才创建的那个存储文件的文件夹里">https://minhaskamal.github.io/DownGit/#/home]将文件夹的地址复制上去然后下载，保存到刚才创建的那个存储文件的文件夹里</a></strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 然后将下载的本地资源上传到github上</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;你想要加的注释&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.statically.io/gh/lingdubing-xo/lingdubing-xo-pic/main/%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AElive2d%E7%9C%8B%E6%9D%BF%E5%A8%98/two.png" style="width:600px;"/></div></div>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.statically.io/gh/lingdubing-xo/lingdubing-xo-pic/main/%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AElive2d%E7%9C%8B%E6%9D%BF%E5%A8%98/three.png" style="width:600px;"/></div></div>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.statically.io/gh/lingdubing-xo/lingdubing-xo-pic/main/%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AElive2d%E7%9C%8B%E6%9D%BF%E5%A8%98/four.png" style="width:600px;"/></div></div>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.statically.io/gh/lingdubing-xo/lingdubing-xo-pic/main/%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AElive2d%E7%9C%8B%E6%9D%BF%E5%A8%98/five.png" style="width:600px;"/></div></div>
<h3 id="5-使用-Statically-做代理"><a href="#5-使用-Statically-做代理" class="headerlink" title="5.使用 Statically 做代理"></a>5.使用 Statically 做代理</h3><p><strong>*到(</strong>静态文件 Statically 地址<strong>)[<a href="https://statically.io/convert/]输入你">https://statically.io/convert/]输入你</a> github 上模型的文件地址，一般为 model.json 结尾*</strong></p>
<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.statically.io/gh/lingdubing-xo/lingdubing-xo-pic/main/%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AElive2d%E7%9C%8B%E6%9D%BF%E5%A8%98/six.png" style="width:600px;"/></div></div>
<p><strong>更改 config.yml 文件下的 path 路径即可修改模型</strong></p>
<h1 id="3-自定义模型设置-几个重要的参数"><a href="#3-自定义模型设置-几个重要的参数" class="headerlink" title="3.自定义模型设置(几个重要的参数)"></a>3.自定义模型设置(几个重要的参数)</h1><ul>
<li><strong>如果一个模型有多个衣服的话。path 路径要设置为一个数据形式，如我 config.yml 设置的那样</strong></li>
<li><strong>dockedPosition 是设置模型在网页左边或者右边</strong></li>
<li><strong>如果模型位置不恰当，请调整 position 属性,第一个为 x 轴，第二个为 y 轴，正数是向左向上，负数是向右向下</strong></li>
</ul>
<div class="note success flat"><p>到这里教程就已圆满结束了，感谢你的浏览，thank you</p>
</div>


<style>
#web_bg{
  background: url(https://ttn1btctkretlayp.public.blob.vercel-storage.com/533aaee8d51e3bd0@middle-GS0cSfpoomF66B0GSlSy5saiW9oaqz.jpg)!important;
  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/
  background-position: center !important;
  background-size: cover !important;
  background-repeat: no-repeat !important;
}
</style>


]]></content>
      <categories>
        <category>Hexo搭建</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi-sqlmodel的使用</title>
    <url>/2025/02/05/fastapi-sqlmodel%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0-SQLModel-是什么"><a href="#0-SQLModel-是什么" class="headerlink" title="0.SQLModel 是什么"></a>0.SQLModel 是什么</h1><p><strong>SQLModel 是一个用于从 Python 代码中使用 Python 对象与 SQL 数据库进行交互的库。它被设计为直观、易于使用、高度兼容且健壮。</strong><br><strong>换而言之，就是将 python 类转化为数据库中数据表及对象的工具</strong><br><strong>对应的(开发文档)[<a href="https://sqlmodel.tiangolo.com/">https://sqlmodel.tiangolo.com/</a>]</strong></p>
<h1 id="1-安装方式"><a href="#1-安装方式" class="headerlink" title="1.安装方式"></a>1.安装方式</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 前提是在虚拟环境下, 安装sqlmodel以后他会一并安装其他依赖</span><br><span class="line">pip install sqlmodel</span><br></pre></td></tr></table></figure>
<h1 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2. 使用方式"></a>2. 使用方式</h1><div class="note info modern"><p><strong>我们先来模拟一个场景，就拿电动车管理系统来举例</strong><br><strong>共八张表，分别为用户表(user),角色表(role),权限表(access),电动车表(machine),区域表(area),记录表(record)</strong><br><strong>用户角色表(userrolelink),角色权限表(roleaccesslink),</strong></p>
</div>
<h3 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入的包</span></span><br><span class="line"><span class="keyword">from</span> sqlmodel <span class="keyword">import</span> SQLModel, Field, Relationship</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> JSON, Column</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础字段</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicModel</span>(<span class="title class_ inherited__">SQLModel</span>):</span><br><span class="line">    create_by: uuid.UUID = Field(description=<span class="string">&quot;创建者&quot;</span>)</span><br><span class="line">    create_time: datetime = Field(default=datetime.utcnow(), description=<span class="string">&quot;创建时间&quot;</span>)</span><br><span class="line">    update_by: uuid.UUID = Field(description=<span class="string">&quot;更新者&quot;</span>)</span><br><span class="line">    update_time: datetime = Field(default=datetime.utcnow(), description=<span class="string">&quot;更新时间&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多对多的关系</span></span><br><span class="line"><span class="comment"># table=True,他就代表是数据库中一张表，为false,就是一个Python类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserRoleLink</span>(BasicModel, table=<span class="literal">True</span>):</span><br><span class="line">    user_id: uuid.UUID = Field(foreign_key=<span class="string">&quot;user.user_id&quot;</span>, primary_key=<span class="literal">True</span>, description=<span class="string">&quot;用户ID&quot;</span>)</span><br><span class="line">    role_id: uuid.UUID = Field(foreign_key=<span class="string">&quot;role.role_id&quot;</span>, primary_key=<span class="literal">True</span>, description=<span class="string">&quot;角色ID&quot;</span>)</span><br><span class="line"></span><br><span class="line">    user: <span class="string">&quot;User&quot;</span> = Relationship(back_populates=<span class="string">&quot;user_role_links&quot;</span>)</span><br><span class="line">    role: <span class="string">&quot;Role&quot;</span> = Relationship(back_populates=<span class="string">&quot;user_links&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个角色对应多个权限,一个权限可对应多个角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoleAccessLink</span>(BasicModel, table=<span class="literal">True</span>):</span><br><span class="line">    role_id: <span class="built_in">str</span> = Field(foreign_key=<span class="string">&quot;role.role_id&quot;</span>, primary_key=<span class="literal">True</span>, description=<span class="string">&quot;角色ID&quot;</span>)</span><br><span class="line">    access_id: <span class="built_in">str</span> = Field(foreign_key=<span class="string">&quot;access.access_id&quot;</span>, primary_key=<span class="literal">True</span>, description=<span class="string">&quot;权限ID&quot;</span>)</span><br><span class="line"></span><br><span class="line">    role: <span class="string">&quot;Role&quot;</span> = Relationship(back_populates=<span class="string">&quot;access_links&quot;</span>)</span><br><span class="line">    access: <span class="string">&quot;Access&quot;</span> = Relationship(back_populates=<span class="string">&quot;access_role_links&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(BasicModel, table=<span class="literal">True</span>):</span><br><span class="line">    user_id: uuid.UUID = Field(primary_key=<span class="literal">True</span>, description=<span class="string">&quot;用户ID,用户的唯一标识&quot;</span>)</span><br><span class="line">    username: <span class="built_in">str</span> = Field(description=<span class="string">&quot;用户名&quot;</span>, index=<span class="literal">True</span>)</span><br><span class="line">    password: <span class="built_in">str</span> = Field(description=<span class="string">&quot;加密过后用户的密码&quot;</span>)</span><br><span class="line">    user_status: <span class="built_in">int</span> = Field(default=<span class="number">1</span>, description=<span class="string">&quot;用户状态,0为禁用状态,1为可用状态,2表示正在骑行状态&quot;</span>, index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 附加的属性</span></span><br><span class="line">    user_role_links: <span class="built_in">list</span>[UserRoleLink] = Relationship(back_populates=<span class="string">&quot;user&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个用户对应多个角色，一个角色对应对个用户</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(BasicModel, table=<span class="literal">True</span>):</span><br><span class="line">    role_id: <span class="built_in">str</span> = Field(primary_key=<span class="literal">True</span>, description=<span class="string">&quot;角色ID,角色的唯一标识&quot;</span>)</span><br><span class="line">    role_name: <span class="built_in">str</span> = Field(description=<span class="string">&quot;角色名&quot;</span>)</span><br><span class="line">    role_desc: <span class="built_in">str</span> | <span class="literal">None</span> = Field(description=<span class="string">&quot;角色描述&quot;</span>, default=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    user_links: <span class="built_in">list</span>[UserRoleLink] = Relationship(back_populates=<span class="string">&quot;role&quot;</span>)</span><br><span class="line">    access_links: <span class="built_in">list</span>[RoleAccessLink] = Relationship(back_populates=<span class="string">&quot;role&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Access</span>(BasicModel, table=<span class="literal">True</span>):</span><br><span class="line">    access_id: <span class="built_in">str</span> = Field(primary_key=<span class="literal">True</span>, description=<span class="string">&quot;权限ID,权限的唯一标识&quot;</span>)</span><br><span class="line">    access_name: <span class="built_in">str</span> = Field(description=<span class="string">&quot;权限名&quot;</span>)</span><br><span class="line">    access_desc: <span class="built_in">str</span> | <span class="literal">None</span> = Field(description=<span class="string">&quot;权限描述&quot;</span>, default=<span class="literal">None</span>)</span><br><span class="line">    access_url: <span class="built_in">str</span> | <span class="literal">None</span> = Field(description=<span class="string">&quot;权限URL&quot;</span>, default=<span class="literal">None</span>)</span><br><span class="line">    parent_id: <span class="built_in">str</span> | <span class="literal">None</span> = Field(description=<span class="string">&quot;父亲ID&quot;</span>, default=<span class="literal">None</span>)</span><br><span class="line">    is_menu: <span class="built_in">bool</span> = Field(description=<span class="string">&quot;是否为菜单&quot;</span>, default=<span class="literal">False</span>)</span><br><span class="line">    is_verify: <span class="built_in">bool</span> = Field(description=<span class="string">&quot;是否需要验证&quot;</span>, default=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    access_role_links: <span class="built_in">list</span>[RoleAccessLink] = Relationship(back_populates=<span class="string">&quot;access&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Machine</span>(BasicModel, table=<span class="literal">True</span>):</span><br><span class="line">    machine_id: uuid.UUID = Field(primary_key=<span class="literal">True</span>, description=<span class="string">&quot;电动车ID,电动车的唯一标识&quot;</span>)</span><br><span class="line">    machine_point: <span class="built_in">dict</span> | <span class="literal">None</span> = Field(default=<span class="literal">None</span>, description=<span class="string">&quot;电动车位置&quot;</span>, sa_column=Column(JSON)) <span class="comment"># json类型</span></span><br><span class="line">    machine_battery: <span class="built_in">int</span> = Field(default=<span class="number">100</span>, description=<span class="string">&quot;电动车电量&quot;</span>)</span><br><span class="line">    status: <span class="built_in">int</span> = Field(default=<span class="number">1</span>, description=<span class="string">&quot;电动车状态,0为正在骑行中,1为空闲状态,2为损坏,3为正在停止&quot;</span>)</span><br><span class="line">    machine_photo: <span class="built_in">str</span> | <span class="literal">None</span> = Field(default=<span class="literal">None</span>, description=<span class="string">&quot;电动车照片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    area_id: <span class="built_in">str</span> = Field(foreign_key=<span class="string">&quot;area.area_id&quot;</span>, description=<span class="string">&quot;区域ID&quot;</span>)</span><br><span class="line">    area: <span class="string">&quot;Area&quot;</span> = Relationship(back_populates=<span class="string">&quot;machines&quot;</span>)</span><br><span class="line">    record: <span class="built_in">list</span>[<span class="string">&quot;Record&quot;</span>] = Relationship(back_populates=<span class="string">&quot;machine&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Area</span>(BasicModel, table=<span class="literal">True</span>):</span><br><span class="line">    area_id: <span class="built_in">str</span> = Field(primary_key=<span class="literal">True</span>, description=<span class="string">&quot;区域ID,区域的唯一标识&quot;</span>)</span><br><span class="line">    area_name: <span class="built_in">str</span> | <span class="literal">None</span> = Field(default=<span class="literal">None</span>, description=<span class="string">&quot;区域名&quot;</span>)</span><br><span class="line">    area_desc: <span class="built_in">str</span> | <span class="literal">None</span> = Field(default=<span class="literal">None</span>, description=<span class="string">&quot;区域描述&quot;</span>)</span><br><span class="line"></span><br><span class="line">    machines: <span class="built_in">list</span>[Machine] = Relationship(back_populates=<span class="string">&quot;area&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Record</span>(BasicModel, table=<span class="literal">True</span>):</span><br><span class="line">    record_id: uuid.UUID = Field(primary_key=<span class="literal">True</span>, description=<span class="string">&quot;记录ID,记录的唯一标识&quot;</span>)</span><br><span class="line">    start_time: datetime | <span class="literal">None</span> = Field(default=<span class="literal">None</span>, description=<span class="string">&quot;开始时间&quot;</span>)</span><br><span class="line">    end_time: datetime | <span class="literal">None</span> = Field(default=datetime.utcnow(), description=<span class="string">&quot;结束时间&quot;</span>)</span><br><span class="line">    stop_time:<span class="built_in">int</span> = Field(default=<span class="number">0</span>, description=<span class="string">&quot;停车时间&quot;</span>)</span><br><span class="line">    consume_battery: <span class="built_in">int</span> = Field(default=<span class="number">0</span>, description=<span class="string">&quot;消耗电量&quot;</span>)</span><br><span class="line">    tracejectory: <span class="built_in">dict</span> | <span class="literal">None</span> = Field(default=<span class="literal">None</span>, description=<span class="string">&quot;轨迹&quot;</span>, sa_column=Column(JSON))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 附加属性</span></span><br><span class="line">    user_id: <span class="built_in">str</span> = Field(foreign_key=<span class="string">&quot;user.user_id&quot;</span>, description=<span class="string">&quot;用户ID&quot;</span>)</span><br><span class="line">    user: User = Relationship(back_populates=<span class="string">&quot;records&quot;</span>)</span><br><span class="line">    machine_id: <span class="built_in">str</span> = Field(foreign_key=<span class="string">&quot;machine.machine_id&quot;</span>, description=<span class="string">&quot;电动车ID&quot;</span>)</span><br><span class="line">    machine: Machine = Relationship(back_populates=<span class="string">&quot;records&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="mysql-配置文件"><a href="#mysql-配置文件" class="headerlink" title="mysql 配置文件"></a>mysql 配置文件</h3><h3 id="mysql-py"><a href="#mysql-py" class="headerlink" title="mysql.py"></a>mysql.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的settings.属性更换成自己的变量即可</span></span><br><span class="line"><span class="keyword">from</span> sqlmodel <span class="keyword">import</span> SQLModel, create_engine</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> models.models <span class="keyword">import</span> User, Role, Machine, Record, Access, UserRoleLink, RoleAccessLink, Area</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">f&quot;mysql+pymysql://<span class="subst">&#123;settings.MYSQL_USER&#125;</span>:<span class="subst">&#123;settings.MYSQL_PASSWORD&#125;</span>@<span class="subst">&#123;settings.MYSQL_IP&#125;</span>:<span class="subst">&#123;settings.MYSQL_PORT&#125;</span>/<span class="subst">&#123;settings.MYSQL_DATABASE&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    SQLModel.metadata.create_all(engine)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="3-启动方式"><a href="#3-启动方式" class="headerlink" title="3.启动方式"></a>3.启动方式</h1><h3 id="Events-py"><a href="#Events-py" class="headerlink" title="Events.py"></a>Events.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> database.mysql <span class="keyword">import</span> register <span class="comment">#这个是上面的mysql配置文件，只是存放可能不同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">startup</span>(<span class="params">app: FastAPI</span>) -&gt; <span class="type">Callable</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Fastapi启动事件</span></span><br><span class="line"><span class="string">    :param app: FastAPI</span></span><br><span class="line"><span class="string">    :return: start_app</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">app_start</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;------fsray-api start------&quot;</span>)</span><br><span class="line">        <span class="comment"># 数据库注册</span></span><br><span class="line">        <span class="keyword">await</span> register()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> app_start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stopping</span>(<span class="params">app: FastAPI</span>) -&gt; <span class="type">Callable</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Fastapi停止事件</span></span><br><span class="line"><span class="string">    :param app: FastAPI</span></span><br><span class="line"><span class="string">    :return: stop_app</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">stop_app</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;------fsray-api stop------&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stop_app</span><br></pre></td></tr></table></figure>
<h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> core <span class="keyword">import</span> Events</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">application = FastAPI(</span><br><span class="line">    debug=settings.APP_DEBUG, <span class="comment">#调试模式</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件监听</span></span><br><span class="line">application.add_event_handler(<span class="string">&quot;startup&quot;</span>, Events.startup(application))</span><br><span class="line">application.add_event_handler(<span class="string">&quot;shutdown&quot;</span>, Events.stopping(application))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = application</span><br></pre></td></tr></table></figure>
<p><strong>最后在 cmd 窗口执行下面命令启动 fastapi 应用,即可看到数据表已经在数据库中了</strong><br><strong>如果想要增添数据表直接增添 models 类</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure>
<div class="note success flat"><p>到这里教程就已圆满结束了，感谢你的浏览，thank you</p>
</div>


<style>
#web_bg{
  background: url(https://ttn1btctkretlayp.public.blob.vercel-storage.com/328dd20726468fc5245e6cdef50311dc-igXavAOFtXxW3LGFbdZDzYw3jScpaa.jpg)!important;
  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/
  background-position: center !important;
  background-size: cover !important;
  background-repeat: no-repeat !important;
}
</style>


]]></content>
      <categories>
        <category>Python Web开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql知识总结(二)</title>
    <url>/2025/02/13/mysql(2)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note simple modern"><p><strong>该文章下的 mysql 题目取自网络,我是二次进行对应延伸的思考</strong></p>
</div>
<h1 id="1-什么是死锁"><a href="#1-什么是死锁" class="headerlink" title="1.什么是死锁"></a>1.什么是死锁</h1><details class="folding-tag" cyan><summary> 解析 </summary>
              <div class='content'>
              <p><strong>是指多个事务在执行过程中, 因资源争用造成了循环等待,事务 A 持有资源 X 并等待 Y，事务 B 持有资源 Y 并等待 X，这就形成了死锁</strong><br><strong>死锁的产生原因:</strong></p><ul><li><strong>1.多个事务以不同的顺序访问相同的资源</strong></li><li><strong>2.事务设计不当,事务的执行时间过长，导致资源放不出来</strong><p class='p red'>ET: 那如何解决呢</p><p class='p green'>1.InnoDB存储引擎会自动检测死锁进行回滚</p><p class='p green'>2.调整锁等待超时参数</p><p class='p green'>1.固定资源的访问顺序 2.优化索引设计 3.合理选择隔离级别</p></li></ul>
              </div>
            </details>
<h1 id="2-创建索引的方式"><a href="#2-创建索引的方式" class="headerlink" title="2.创建索引的方式"></a>2.创建索引的方式</h1><details class="folding-tag" cyan><summary> 解析 </summary>
              <div class='content'>
              <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `employee` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `age` int(11) DEFAULT NULL,</span><br><span class="line">  `date` datetime DEFAULT NULL,</span><br><span class="line">  `sex` int(1) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_name` (`name`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">ALTER TABLE employee ADD INDEX index_name (column);</span><br><span class="line"></span><br><span class="line">CREATE INDEX index_name ON table_name (column);</span><br></pre></td></tr></table></figure>
              </div>
            </details>
<h1 id="3-InnoDB-内存结构包含哪四大核心组件"><a href="#3-InnoDB-内存结构包含哪四大核心组件" class="headerlink" title="3.InnoDB 内存结构包含哪四大核心组件"></a>3.InnoDB 内存结构包含哪四大核心组件</h1><div class="note success flat"><p>这个是看的沈健老师的公众号文章<br>(缓冲池)[<a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651962450&amp;idx=1&amp;sn=ce17c4da8d20ce275f75d0f2ef5e40c9&amp;chksm=bd2d098e8a5a809834aaa07da0d7546555385543fb6d687a7cf94d183ab061cd301a76547411&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651962450&amp;idx=1&amp;sn=ce17c4da8d20ce275f75d0f2ef5e40c9&amp;chksm=bd2d098e8a5a809834aaa07da0d7546555385543fb6d687a7cf94d183ab061cd301a76547411&amp;scene=21#wechat_redirect</a>]<br>(写缓冲)[<a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651962467&amp;idx=1&amp;sn=899ea157b0fc6f849ec80a4d055a309b&amp;chksm=bd2d09bf8a5a80a972a2e16a190ed7dffe03f89015ead707bdfcc5aeb8388fb278f397c125f1&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651962467&amp;idx=1&amp;sn=899ea157b0fc6f849ec80a4d055a309b&amp;chksm=bd2d09bf8a5a80a972a2e16a190ed7dffe03f89015ead707bdfcc5aeb8388fb278f397c125f1&amp;scene=21#wechat_redirect</a>]</p>
</div>
<details class="folding-tag" cyan><summary> 解析 </summary>
              <div class='content'>
              <details class="folding-tag" cyan><summary> 缓冲池 </summary>              <div class='content'>              <ul><li><p><strong>缓冲池: 缓存表数据和索引数据,把磁盘的数据放在缓冲池,避免每次访问都进行磁盘 IO</strong><br><strong>而磁盘读写并不是需要啥读啥，而是一种预读策略，按页进行读取，一次至少读 4k 数据(一页),如果未来要读取的数据在这页中，能减少磁盘 IO 的次数</strong><br><strong>局部性原理:数据访问，通常都遵循“集中读写”的原则，使用一些数据，大概率会使用附近的数据</strong><br><strong>缓冲池一般也是按页缓存数据</strong></p><p class='p red'>LRU算法(最近最少算法)</p><p class='p green'>把入缓冲池的页放到LRU的头部，作为最近访问的元素，从而最晚被淘汰，一般有两种情况</p><p class='p green'>1.页已经在缓冲池里，那就只做“移至”LRU头部的动作，而没有页被淘汰</p><p class='p green'>2.页没在缓冲池里，将页放在 LRU 的头部</p><p class='p red'>为啥mysql不使用这种算法呢</p><p class='p green'>1. 预读失效：MYSQL 提前把页放入缓冲池，但是并没有从页中读取到数据</p><p class='p red'>如何优化预读失效呢} {% p green 将LRU分为两个部分：新生代(new sublist) 老生代(old sublist)，新生代占70%，；老生代占30%，新生代尾部连接老生代的尾部，每次预读进缓冲池的页先进入老生代的头部，如果真正读取的话就进入新生代的头部，预读失效的话放在老生代里也能更快的淘汰</p><p class='p red'>2. 缓冲池污染: 当某一个SQL语句，要批量扫描大量数据时，可能导致把缓冲池的所有页都替换出去，导致大量热数据被换出，MySQL性能急剧下降，这种情况叫缓冲池污染</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where name like &quot;%shenjian%&quot;;</span><br></pre></td></tr></table></figure><p><strong>虽然结果集可能只有少量数据，但这类 like 不能命中索引，必须全表扫描，就需要访问大量的页</strong><br><strong>如此一来，所有的数据页都会被加载到新生代的头部，但只会访问一次，真正的热数据被大量换出</strong></p><p class='p green'>MySQL缓冲池加入了一个“老生代停留时间窗口”的机制</p><p class='p green'>插入老生代头部的页，即使立刻被访问，并不会立刻放入新生代头部</p><p class='p green'>只有满足“被访问”并且“在老生代停留时间”大于 T，才会被放入新生代头部</p><p><strong>InnoDB 里面有哪些参数</strong></p><ul><li><strong>innodb_buffer_pool_size:配置缓冲池的大小，在内存允许的情况下，DBA 往往会建议调大这个参数，越多数据和索引放到内存里，数据库的性能会越好</strong></li><li><strong>innodb_old_blocks_time: 老生代停留时间窗口，单位是毫秒，默认是 1000，即同时满足“被访问”与“在老生代停留时间超过 1 秒”两个条件，才会被插入到新生代头部</strong></li><li><strong>innodb_old_blocks_pct: 老生代占整个 LRU 链长度的比例，默认是 37，即整个 LRU 中新生代与老生代长度比例是 63:37</strong></li></ul></li></ul>              </div>            </details><details class="folding-tag" cyan><summary> 写缓冲 </summary>              <div class='content'>              <ul><li><p><strong>写缓冲:它是一种应用在非唯一普通索引页(non-unique secondary index page)不在缓冲池中，对页进行了写操作，并不会立刻将磁盘页加载到缓冲池，而仅仅记录缓冲变更(buffer changes)，等未来数据被读取时，再将数据合并(merge)恢复到缓冲池中的技术</strong></p><p><strong>普通情况下</strong></p><ul><li><strong>情况一:假如要修改页号为 4 的索引页，而这个页正好在缓冲池内</strong><br><strong>1.直接修改缓冲池中的页, 一次内存操作</strong><br><strong>2.写入 redo log, 一次磁盘操作</strong></li></ul><p class='p red'>是否会出现一致性问题</p><p class='p green'>答案是不会，因为读取会命中缓存池里的页，缓冲池LRU数据淘汰，会将“脏页”刷回磁盘，数据库异常奔溃，能够从redo log中恢复数据</p>**什么时候缓冲池中的页，会刷到磁盘上呢？****定期刷磁盘(批量写)，而不是每次刷磁盘，能够降低磁盘 IO，提升 MySQL 的性能**- **情况二:修改页号为 40 的索引页，而这个页不在缓冲池里**  **1.先把页号为 40 的页从磁盘读取到缓冲池中，一次磁盘读操作**  **2.修改缓存池中的页，一次内存操作**  **3.写入 redo log, 一次磁盘操作**<p class='p red'>没有命中缓冲池的时候，至少产生一次磁盘IO，对于写多读少的业务场景，是否还有优化的空间呢</p><p class='p green'>我们这时就要用到写缓冲，那现在的情况二是什么样的呢</p>**1.在写缓冲记录中写入这个操作,一次内存操作****2.写入 redo log 日志里, 一次磁盘顺序写操作**<p class='p red'>那现在40这一页并没有进入缓冲池中，是否会出现不一致问题</p><p class='p green'>1.数据库异常奔溃，能够从redo log中恢复数据</p><p class='p green'>2.数据库异常奔溃，能够从redo log中恢复数据</p><p class='p green'>3.写缓冲不只是一个内存结构，它也会被定期刷盘到写缓冲系统表空间</p>**假如稍后的一个时间,有一个请求查询索引 40 页的数据呢，会出现什么操作呢****1.载入索引页，缓冲池未命中****2.从写缓冲记录中读取相关信息****3.恢复索引页，放到缓冲池 LRU 里**<p class='p red'>除了数据页被访问，还有哪些场景会触发刷写缓冲中的数据呢？</p><p class='p green'>有一个后台线程，会认为数据库空闲时</p><p class='p green'>数据库缓冲池不够用时</p><p class='p green'>数据库正常关闭时</p><p class='p green'>redo log写满时</p>什么业务场景，适合开启 InnoDB 的写缓冲机制？先说什么时候不适合，如上文分析，当：（1）数据库都是唯一索引；（2）或者，写入一个数据后，会立刻读取它；这两类场景，在写操作进行时（进行后），本来就要进行进行页读取，本来相应页面就要入缓冲池，此时写缓存反倒成了负担，增加了复杂度。什么时候适合使用写缓冲，如果：（1）数据库大部分是非唯一索引；（2）业务是写多读少，或者不是写后立刻读取；（账单流水业务）可以使用写缓冲，将原本每次写入都需要进行磁盘 IO 的 SQL，优化定期批量写磁盘。<p class='p red'>上述原理，对应InnoDB里哪些参数？</p><p class='p green'>innodb_change_buffer_max_size:配置写缓冲的大小，占整个缓冲池的比例，默认值是25%，最大值是50%</p><p class='p green'>innodb_change_buffering: 配置哪些写操作启用写缓冲，可以设置成all/none/inserts/deletes等</p></li></ul>              </div>            </details><details class="folding-tag" cyan><summary> 自适应哈希索引 </summary>              <div class='content'>              <p class='p red'>有的说InnoDB支持哈希索引，有的说不支持，到底哪个是正确的呢</p><p class='p green'>1.InnoDB用户无法手动创建哈希索引，这一层上说，InnoDB确实不支持哈希索引} {% p green</p>**InnoDB 会在主键 id 建立聚簇索引, 叶子存储记录本身, 在 name 上建立普通索引，叶子存储主键值****发起主键 id 查询时，能够通过聚簇索引，直接定位到行记录****通过 name 进行查询的时候，先会从普通索引查询到主键，再有主键，从聚集索引上二次遍历定位到记录****在 MySQL 运行的过程中，如果 InnoDB 发现，有很多 SQL 存在这类很长的寻路，并且有很多 SQL 会命中相同的页面(page)，InnoDB 会在自己的内存缓冲区(Buffer)里，开辟一块区域，建立自适应哈希所有 AHI，以加速查询****InnoDB 的自使用哈希索引，更像“索引的索引”，毕竟其目的是为了加速索引寻路****哈希 key 是索引键值，value 是索引记录页面位置**<p class='p red'>业务场景有哪些呢</p><p class='p green'>很多单行记录查询（例如passport，用户中心等业务</p><p class='p green'>索引范围查询（此时AHI可以快速定位首行记录</p><p class='p green'>所有记录内存能放得下</p>              </div>            </details><details class="folding-tag" cyan><summary> 日志缓冲 </summary>              <div class='content'>              <p class='p red'>MySQL崩溃，重启后发现有些已经提交的事务对数据的修改丢失了，不是说事务能保证ACID特性么，想问下什么情况下可能导致“事务已经提交，数据却丢失”呢</p><p class='p red'>redo log 有什么用?</p><p class='p green'>事务提交后，必须将事务对数据页的修改刷(fsync)到磁盘上，才能保证事务的ACID特性</p><p class='p green'>这个刷盘，是一个随机写，随机写性能较低，如果每次事务提交都刷盘，会极大影响数据库的性能</p><p class='p green'>有什么解决方法呢</p><ul><li><strong>第一种是先写入日志，将随机写变成顺序写</strong></li><li><strong>第二种是将每次写改为批量写</strong></li></ul><p class='p red'>假如出现数据库崩溃的情况，这时候数据页还没进行刷盘，数据库重启时，就会重做redo log 里面的内容</p><p class='p green'>redo log 的三层架构</p><ul><li><strong>最上面一层是 log buffer 缓冲区</strong></li><li><strong>中间是 os 的缓冲区</strong></li><li><strong>最下面时落盘的日志文件</strong></li></ul><p><strong>redo log 最终落盘的顺序</strong><br><strong>1.先调用 mysql 的 write 函数写入 log buffer</strong><br><strong>2.*然后调用系统的 write 函数将 log buffer 的内容写入 os cache，mysql 系统调用完 write 后，会默认文件已经写完，什么时候落盘是操作系统决定的</strong><br><strong>3.最后，由操作系统（当然，MySQL 也可以主动 flush）将 OS cache 里的数据，最终 fsync 到磁盘上</strong></p><p><p class='p red'>操作系统为什么要缓冲数据到OS cache里，而不直接刷盘呢</p></p><p><p class='p green'>将每次写优化成批量写，提高性能，同理 mysql 缓冲数据到 log buffer 里也是这个目的</p></p><p><p class='p red'>那这样有什么缺点呢</p></p><p><p class='p green'>缺点就是可能会丢失数据</p><br><strong>（1）事务提交时，将 redo log 写入 Log Buffer，就会认为事务提交成功；</strong></p><p><strong>（2）如果写入 Log Buffer 的数据，write 入 OS cache 之前，数据库崩溃，就会出现数据丢失；</strong></p><p><strong>（3）如果写入 OS cache 的数据，fsync 入磁盘之前，操作系统奔溃，也可能出现数据丢失</strong></p><p><strong>如何根据业务方案去选择刷 redo log 的策略</strong><br><strong>mysql 里有这样一个参数 innodb_flush_log_at_trx_commit:能够控制事务提交时，刷 redo log 的策略</strong></p><ul><li>1.策略一:最佳性能(批量写)<br><strong>每隔一秒，才将 Log Buffer 中的数据批量 write 入 OS cache，同时 MySQL 主动 fsync。这种策略，如果数据库奔溃，有一秒的数据丢失。</strong></li><li>2.策略二:强一致<br><strong>每次事务提交，都将 Log Buffer 中的数据 write 入 OS cache，同时 MySQL 主动 fsync。这种策略，是 InnoDB 的默认配置，为的是保证事务 ACID 特性</strong></li><li>3.策略三:折中<br><strong>每次事务提交，都将 Log Buffer 中的数据 write 入 OS cache；每隔一秒，MySQL 主动将 OS cache 中的数据批量 fsync。画外音：磁盘 IO 次数不确定，因为操作系统的 fsync 频率并不是 MySQL 能控制的这种策略，如果操作系统奔溃，最多有一秒的数据丢失。画外音：因为 OS 也会 fsync，MySQL 主动 fsync 的周期是一秒，所以最多丢一秒数据</strong><br><strong>高并发业务，行业内的最佳实践，是：innodb_flush_log_at_trx_commit=2（折中方案）</strong><br>高并发业务，行业最佳实践，是使用第三种折衷配置（=2），这是因为：<br>（1）配置为 2 和配置为 0，性能差异并不大，因为将数据从 Log Buffer 拷贝到 OS cache，虽然跨越用户态与内核态，但毕竟只是内存的数据拷贝，速度很快；<br>（2）配置为 2 和配置为 0，安全性差异巨大，操作系统崩溃的概率相比 MySQL 应用程序崩溃的概率，小很多，设置为 2，只要操作系统不奔溃，也绝对不会丢数据</li></ul>              </div>            </details>
              </div>
            </details>
<div class="note success flat"><p>到这里教程二就已圆满结束了，感谢你的浏览，thank you</p>
</div>


<style>
#web_bg{
  background: url(https://ttn1btctkretlayp.public.blob.vercel-storage.com/R-C%20(5)-VZjlLYPzEe2w8gM1BJDaVrSOte8XOO.jpg)!important;
  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/
  background-position: center !important;
  background-size: cover !important;
  background-repeat: no-repeat !important;
}
</style>


]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql知识总结(一)</title>
    <url>/2025/02/10/mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note simple modern"><p><strong>该文章下的 mysql 题目取自网络,我是二次进行对应延伸的思考</strong></p>
</div>
<h1 id="1-MYSQL-索引使用的话要有哪些注意事项"><a href="#1-MYSQL-索引使用的话要有哪些注意事项" class="headerlink" title="1.MYSQL 索引使用的话要有哪些注意事项:"></a>1.MYSQL 索引使用的话要有哪些注意事项:</h1><p><strong>此问题可从两个角度来回答,索引不适用于那些场景,索引哪些场景下会失效</strong></p>
<h3 id="1-索引哪些场景下会失效"><a href="#1-索引哪些场景下会失效" class="headerlink" title="1.索引哪些场景下会失效"></a>1.索引哪些场景下会失效</h3><details class="folding-tag" cyan><summary> 查询条件包含 or </summary>
              <div class='content'>
              <p><strong>原因:1.这我们就需要提到 mysql 的查询优化器的查询策略，他会根据查询条件和索引情况选择最优的查询计划,当 or 条件的一列未被索引,查询优化器可能会认为全表扫描比使用索引效率高，在数据分布不均匀或者大量重复值的情况下，全表扫描的优先级也可能比使用索引效率高,而且如果 or 条件设计多个索引的时候,mysql 对多个索引扫描，排序，合并，这本身就挺耗费 cpu 内存资源的。</strong><br><strong>解决办法:用 or 的查询分成多个子查询，这样每个子查询可以单独使用其自身的索引，第二个方法就是创建复合索引，比如 select * from user where col1 = val1 or col2 = val2 的查询，可以创建一个(col1,col2)的复合查询</strong></p>
              </div>
            </details>
<details class="folding-tag" cyan><summary> like通配符会导致索引失效.(原因及解析) </summary>
              <div class='content'>
              <p><strong>原因:like “abc%”,就是 abc 作为前缀匹配的，索引有效，因为索引是按列值的顺序排列的，如果是后缀匹配 like %abc,索引就会失效,任意位置匹配像 like %abc% 也会失效,这 mysql 通常会走全表扫描</strong><br><strong>解决办法:尽量使用前缀匹配</strong></p>
              </div>
            </details>
<details class="folding-tag" cyan><summary> 联合索引，查询时的条件列不是联合索引中的第一个列，索引失效.(原因及解析) </summary>
              <div class='content'>
              <p><strong>原因:联合查询遵循最左前缀法则，查询条件必须从最左侧列查询，所以索引会失效</strong><br><strong>解决办法:拆分查询逻辑</strong></p>
              </div>
            </details>
<details class="folding-tag" cyan><summary> 对索引字段进行函数运算(原因及解析) </summary>
              <div class='content'>
              <p><strong>原因:对索引字段进行函数运算,会改变原本字段的原始值,而索引是依靠原始字段值进行构建的，有序性就被破坏了</strong><br><strong>解决办法:1.对要索引的查询字段不要使用函数运算 2.要不就在设计一个新字段，比如折扣价是原价的 0.9</strong></p>
              </div>
            </details>
<details class="folding-tag" cyan><summary> 对索引字段进行!=，not in，is null会导致索引失效(原因及解析) </summary>
              <div class='content'>
              <p><strong>原因:这些运算符通过会导致查出的数据不是唯一，mysql 可能会运用全表扫描</strong><br><strong>解决办法:1.将查询拆分为子查询</strong></p>
              </div>
            </details>
<h3 id="2-索引不适用于哪些场景"><a href="#2-索引不适用于哪些场景" class="headerlink" title="2.索引不适用于哪些场景"></a>2.索引不适用于哪些场景</h3><ul>
<li><strong>数据量少的不适合加索引</strong></li>
<li><strong>离散性低的字段不适合加索引，比如性别就男和女</strong></li>
<li><strong>更新比较频繁也不适合加索引</strong></li>
</ul>
<h1 id="2-InnoDB-与-MyISAM-的区别"><a href="#2-InnoDB-与-MyISAM-的区别" class="headerlink" title="2.InnoDB 与 MyISAM 的区别"></a>2.InnoDB 与 MyISAM 的区别</h1><details class="folding-tag" cyan><summary> 解析 </summary>
              <div class='content'>
              <ul><li><strong>MyISAM 是 mysql 早期的存储引擎，支持全文索引，5.7 以下版本的 InnoDB 不支持全文索引</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 开启事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 从账户A中扣除100元</span><br><span class="line">UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;</span><br><span class="line"></span><br><span class="line">-- 向账户B中增加100元</span><br><span class="line">UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;</span><br><span class="line"></span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><ul><li><strong>MyISAM 不支持事务，要么全部成功，InnoDB 支持事务，事务是指一组逻辑操作单元，这些操作要么全部失败，事务的四个特性(ACID)为</strong><ul><li><strong>原子性:事务作为一个整体被执行，其中包含的操作要不全部执行，要不全部不执行</strong><br><strong>实现原理:mysql 通过 redolog(重做日志)和 undolog(回滚日志),redolog 记录对数据的修改操作，在事务提交的时候写入磁盘，在系统</strong><br><strong>崩溃的时候，可以通过 redolog 恢复数据，undolog 记录数据被修改前的数据状态,如果执行失败，可以恢复事务可是的状态</strong><p class='p red'>log 的写入顺序，事务提交前先写入 undolog，在写入 redolog，只有 redolog 完成后，事务才算真正提交，为啥是这样的顺序呢</p><p class='p green'>在事务提交之前，先写入 Undo Log 可以确保在事务失败时，系统能够通过 Undo Log 恢复到事务开始之前的状态。如果先写入 Redo Log，而 Undo Log 尚未写入，那么在事务失败时，系统将无法撤销部分已完成的修改，从而破坏原子性</p></li><li><strong>一致性:事务执行前后，数据库从一个一致的状态转换成另一个一致的状态，比如 A+B 两个人一共有 2 万元，A 转给 B5000，这个事务执行完他俩一共还是只有 2 万元</strong></li><li><strong>隔离性:多个事务并发访问时，事务之间是相互隔离的，即一个事务不会影响其他事务的运行效果</strong><br><p class='p red'>ET:并发和并行有啥区别:并发指的是一个 cpu 处理多个任务，并行是多个 cpu 处理多个任务，就好比吃馒头，并发是一个人吃三个馒头，只不过</p><br><p class='p green'>它在一直轮转，让你以为是三个馒头一起被吃，而并行是三个人吃三个馒头</p><br><strong>共享锁允许多个事务同时读取事务，但是只能有一个修改，排他锁是不让其他人读取和修改</strong><br><strong>事务隔离级别:读未提交,读已提交,可重复读,串行化</strong><br><p class='p red'>那这个可重复读读取的都是一个快照，第一个事务处理完，那第二个事务不是还是原来的快照版本</p><br><p class='p green'>在MySQL的可重复读（Repeatable Read）隔离级别下，第二个事务看到的是事务开始时的快照版本，而不是第一个事务提交后的最新版本。因此，第二个事务的修改是在快照版本的基础上进行的，而不是在第一个事务提交后的版本上进行的。这可能会导致一些并发问题，比如丢失更新或不可重复读</p><br><p class='p green'>如何去避免这个问题呢:</p> - 1.使用 SELECT … FOR UPDATE 或 SELECT … LOCK IN SHARE MODE,这些操作会读取最新的数据版本，并且会对数据加锁，防止其他事务修改 - 2.将事务隔离级别设置为读已提交（Read Committed）。在读已提交隔离级别下，每次读取都会看到最新的已提交数据版本，而不是事务开始时的快照版本 - 3.使用串行化,这样并发性能是最低的<br><strong>持久性:表示事务完成以后，该事务对数据库所作的操作更改，将持久地保存在数据库之中</strong></li></ul></li><li><strong>MyISAM 没有外键，InnoDB 有外键,外键是一种数据库约束，用于主表删除数据时，从表数据也进行更改。所以 InnoDB 可以进行级联删除，级联更新的操作</strong></li><li><strong>MyISAM 不支持 MVCC，MVCC 是指多版本并发控制，意思是每次对数据进行修改的时候，数据库都会生成一个新数据版本，允许读数据时候不加锁，MVCC 支持可重复读和读已提交的隔离级别</strong></li><li><strong>MYISAM 不支持行级锁,InnoDB 行级锁和表级锁都支持</strong></li><li><strong>MyISAM 的表是可以没有主键的</strong></li><li><strong>InnoDB 查询的速度比 MyISAM 快,插入和删除慢一些，因为 InnoDB 数据和索引放在一个叶子结点中，M</strong></li></ul>
              </div>
            </details>
<h1 id="3-limit-大量数据-比如-100000-加载很慢的话，你是怎么解决的呢"><a href="#3-limit-大量数据-比如-100000-加载很慢的话，你是怎么解决的呢" class="headerlink" title="3.limit 大量数据(比如 100000) 加载很慢的话，你是怎么解决的呢"></a>3.limit 大量数据(比如 100000) 加载很慢的话，你是怎么解决的呢</h1><details class="folding-tag" cyan><summary> 解析 </summary>
              <div class='content'>
              <ul><li><strong>1.从业务的角度看,普通用户会爬取到这么纵深的数据吗，是不是应该返回做一些限制</strong></li><li><strong>2.如果 id 数据是连续自增的，可以返回上次查询的最大偏移量，然后再往下 limit</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id，name from employee where id&gt;1000000 limit 10</span><br></pre></td></tr></table></figure><ul><li><strong>3.order by + 索引（id 为索引）</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id，name from employee order by id  limit 1000000，10</span><br></pre></td></tr></table></figure>
              </div>
            </details>
<h1 id="4-在高并发的情况下-如何做到安全的修改一行数据"><a href="#4-在高并发的情况下-如何做到安全的修改一行数据" class="headerlink" title="4.在高并发的情况下,如何做到安全的修改一行数据"></a>4.在高并发的情况下,如何做到安全的修改一行数据</h1><details class="folding-tag" cyan><summary> 解析 </summary>
              <div class='content'>
              <p><strong>要安全的修改同一行数据，就要保证一个线程在修改时其它线程无法更新这行记录。一般有悲观锁和乐观锁两种方案</strong></p><ul><li><strong>悲观锁:当前线程要进来修改数据的时候,本次事务提交之前,其他线程都不能进来修改数据,可使用 select…for update</strong></li><li><strong>乐观锁:有线程过来，先放过去修改，如果看到别的线程没修改过，就可以修改成功，如果别的线程修改过，就修改失败或者重试。实现方式：乐观锁一般会使用版本号机制或 CAS 算法实现</strong><p class='p red'>ET: CAS算法是啥</p><p class='p green'>AS算法的核心思想是通过一个原子操作来比较和更新变量的值如果当前变量的值等于预期值（即V == A），则将变量更新为新值（即V = B），并返回true。 如果当前变量的值不等于预期值（即V != A），则不进行任何操作，并返回false</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个锁</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个共享变量</span></span><br><span class="line">shared_variable = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">    <span class="keyword">global</span> shared_variable</span><br><span class="line">    <span class="keyword">with</span> lock:  <span class="comment"># 使用锁确保操作的原子性</span></span><br><span class="line">        shared_variable += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个线程</span></span><br><span class="line">threads = [threading.Thread(target=increment) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动线程</span></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">    thread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待线程完成</span></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">    thread.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(shared_variable)  <span class="comment"># 输出：10</span></span><br></pre></td></tr></table></figure>
              </div>
            </details>
<h1 id="5-mysql-中-in-和-exists-的区别"><a href="#5-mysql-中-in-和-exists-的区别" class="headerlink" title="5.mysql 中 in 和 exists 的区别"></a>5.mysql 中 in 和 exists 的区别</h1><h3 id="1-exist"><a href="#1-exist" class="headerlink" title="1.exist"></a>1.exist</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where exists (select 1);</span><br><span class="line"></span><br><span class="line">SELECT * FROM A WHERE EXISTS (SELECT * from B WHERE B.id = A.id);</span><br><span class="line">伪代码实现</span><br><span class="line">for (i = 0; i &lt; count(A); i++) &#123;</span><br><span class="line">    a = get_record(A, i); #从A表逐条获取记录</span><br><span class="line">    if (B.id = a[id]) &#123; #如果子条件成立</span><br><span class="line">        result[] = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line"># 这里主要用到了B表的索引，A表如何对查询的效率影响不大</span><br></pre></td></tr></table></figure>
<p><strong>exists 对外表用 loop 逐条查询，每次查询都会查看 exists 的条件语句，当 exists 里的条件语句能够返回记录行时（无论记录行是的多少，只要能返回），条件就为真，返回当前 loop 到的这条记录；反之，如果 exists 里的条件语句不能返回记录行，则当前 loop 到的这条记录被丢弃，exists 的条件就像一个 bool 条件，当能返回结果集则为 true，不能返回结果集则为 false</strong><br><strong>总结：如果 A 表(外表)有 n 条记录，那么 exists 查询就是将这 n 条记录逐条取出，然后判断 n 遍 exists 条件</strong><br>n<em>n</em>s</p>
<h3 id="2-in"><a href="#2-in" class="headerlink" title="2.in"></a>2.in</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM A WHERE A.id IN (SELECT id FROM B);</span><br><span class="line">等效于</span><br><span class="line">SELECT * FROM A WHERE A.id = 1 OR A.id = 2 OR A.id = 3;</span><br><span class="line"># 只对b进行一次查询</span><br><span class="line"># 这里主要是用到了A的索引，B表如何对查询影响不大。</span><br></pre></td></tr></table></figure>
<p><strong>in 查询就是先将子查询条件的记录全都查出来，假设结果集为 B，共有 m 条记录，然后再将子查询条件的结果集分解成 m 个，再进行 m 次查询</strong><br><strong>in 查询的子条件返回结果必须只有一个字段</strong><br>m<em>m</em>s</p>
<p><strong>表的规模不是看内部表和外部表，而是外部表和子查询结果集</strong><br><strong>当子查询结果集很大，而外部表较小的时候，Exists 的 Block Nested Loop(Block 嵌套循环)的作用开始显现，并弥补外部表无法用到索引的缺陷，查询效率会优于 IN</strong><br><strong>当子查询结果集较小，而外部表很大的时候，Exists 的 Block 嵌套循环优化效果不明显，IN 的外表索引优势占主要作用，此时 IN 的查询效率会优于 Exists</strong></p>
<div class="note success flat"><p>到这里教程一就已圆满结束了，感谢你的浏览，thank you</p>
</div>


<style>
#web_bg{
  background: url(https://ttn1btctkretlayp.public.blob.vercel-storage.com/c950811657d44cf4cea4c2a810eb913e-TMHt4h7aBdKG7pvRGCE6cadoEe6tsi.jpg)!important;
  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/
  background-position: center !important;
  background-size: cover !important;
  background-repeat: no-repeat !important;
}
</style>


]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql知识总结(三)</title>
    <url>/2025/02/18/mysql(3)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>napcat结合koishi制作qq机器人插件</title>
    <url>/2025/02/02/napcat%E7%BB%93%E5%90%88koishi/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>注:这篇教程是 2025-02-02 所创，所著内容对以后不一定有效，因为 napcat 的版本更新很快，仅提供借鉴参考意义，相关<a href="https://www.bilibili.com/video/BV1PGFXe1E3G/?spm_id_from=333.1387.homepage.video_card.click&amp;vd_source=540b90b530334be98a9c1f8721345cef">视频教程</a></p>
<h1 id="1-napcat-安装及启动"><a href="#1-napcat-安装及启动" class="headerlink" title="1.napcat 安装及启动"></a>1.napcat 安装及启动</h1><h3 id="1-下载-napcat"><a href="#1-下载-napcat" class="headerlink" title="1.下载 napcat"></a>1.下载 napcat</h3><p><strong>napcat 的<a href="https://github.com/NapNeko/NapCatQQ/releases">官网地址</a>,下载最新的压缩包(最好的是最新版本，否则可能会出现 bug)，保证你现在电脑 qq 是最新版本的,然后解压压缩包文件</strong><br><strong>点击 napcat.bat,启动控制台程序,然后会出现一个二维码链接,它也会提醒你在文件夹中生成了二维码图片，这里看你喜欢哪种打开二维码的方式</strong></p>
<h3 id="2-扫描二维码登录-及快速登录"><a href="#2-扫描二维码登录-及快速登录" class="headerlink" title="2.扫描二维码登录(及快速登录)"></a>2.扫描二维码登录(及快速登录)</h3><p><strong><a href="https://zh.qr-code.net/">在线解析二维码平台</a>,可以复制上面的二维码链接，就会出现二维码图片，扫描即可登录</strong><br><strong>快速登录(在已经登录过一次的情况下，右键记事本编辑 napcat.quick.bat, 将里面的号码(我用的时候是 10086)改成自己要登录的账号,然后再 qq 手机端勾选登录不用再确定)</strong></p>
<h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><p><strong>打开 NapCat.Shell/versions/9.9.17-31245/resources/app/napcat/config/webui.json(文件路径因电脑而异)</strong><br><strong>host 改成 127.0.0.1, port 改为 6099</strong></p>
<h3 id="4-打开-napcat-的-WebUI-界面"><a href="#4-打开-napcat-的-WebUI-界面" class="headerlink" title="4.打开 napcat 的 WebUI 界面"></a>4.打开 napcat 的 WebUI 界面</h3><p><strong>在浏览器地址栏输入 127.0.0.1:6099/webui,输入 webui.json 文件里的 token,在 v4.5.20 版本下 token 默认为 napcat，登录即进入页面</strong></p>
<h3 id="5-新建网络配置"><a href="#5-新建网络配置" class="headerlink" title="5.新建网络配置"></a>5.新建网络配置</h3><p><strong>新建 websocket client url: ws://127.0.0.1:5140,token 自定义一个,待会要用</strong></p>
<h1 id="2-koishi-安装及启动"><a href="#2-koishi-安装及启动" class="headerlink" title="2.koishi 安装及启动"></a>2.koishi 安装及启动</h1><h3 id="1-下载-koishi"><a href="#1-下载-koishi" class="headerlink" title="1.下载 koishi"></a>1.下载 koishi</h3><p><strong>打开<a href="https://koishi.js.org/manual/starter/boilerplate.html">koishi 官网</a>,按照官网教程安装 node.js 和 npm(或者 yarn)</strong></p>
<h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 我这里用的yarn</span><br><span class="line"># 在任意文件夹命令行输入以下命令</span><br><span class="line">yarn create koishi</span><br></pre></td></tr></table></figure>
<h3 id="3-下载-koishi-插件"><a href="#3-下载-koishi-插件" class="headerlink" title="3.下载 koishi 插件"></a>3.下载 koishi 插件</h3><p><strong>创建完他会自动打开对应的 koishiWebUI,下载 adapter-onebot,我安装的是 6.4.0 版本，对应的 4.16.6 的，安装完以后打开依赖管理</strong><br><strong>将 koishi(依赖名) 更新到最新的版本，koishi-plugin-adapter-onebot 版本保持不变</strong><br><strong>打开插件管理找到 adapter-onebot 插件填入对应的 qq 号,token 填入你刚才自定义的 napcat 的 token, 协议选择 ws-reserve，path 选择/onebot</strong></p>
<h3 id="4-右上角启动插件"><a href="#4-右上角启动插件" class="headerlink" title="4.右上角启动插件"></a>4.右上角启动插件</h3><p><strong>对对应的 qq 号输入 help, 如果有相关的回复, 说明链接成功</strong></p>
<h3 id="5-创建自定义插件"><a href="#5-创建自定义插件" class="headerlink" title="5.创建自定义插件"></a>5.创建自定义插件</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yarn setup 插件名字</span><br></pre></td></tr></table></figure>
<h3 id="6-应用自定义插件"><a href="#6-应用自定义插件" class="headerlink" title="6.应用自定义插件"></a>6.应用自定义插件</h3><p><strong>在插件配置右上角点击添加插件,然后应用就行</strong></p>
<div class="note success flat"><p>到这里教程就已圆满结束了，感谢你的浏览，thank you</p>
</div>


<style>
#web_bg{
  background: url(https://ttn1btctkretlayp.public.blob.vercel-storage.com/6c463326eb8ecc39@middle-oONFL2NCbs9uJvXIbxck6k3pDJPByn.jpg)!important;
  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/
  background-position: center !important;
  background-size: cover !important;
  background-repeat: no-repeat !important;
}
</style>


]]></content>
      <categories>
        <category>QQ机器人</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>vercel配置及优化图床加载方案</title>
    <url>/2025/02/03/vercel%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0-Vercel-是什么"><a href="#0-Vercel-是什么" class="headerlink" title="0.Vercel 是什么"></a>0.Vercel 是什么</h1><p><strong>vercel 是一个网站托管服务，类似与 github page，可以部署静态网站, 我用它来部署 hexo 博客, 这个博客即为 vercel 部署</strong></p>
<h1 id="1-安装方式"><a href="#1-安装方式" class="headerlink" title="1.安装方式"></a>1.安装方式</h1><h3 id="第一步-登录到vercel-网站上，同时你需要有一个-github-账户，且里面有你需要部署的项目"><a href="#第一步-登录到vercel-网站上，同时你需要有一个-github-账户，且里面有你需要部署的项目" class="headerlink" title="第一步, 登录到vercel 网站上，同时你需要有一个 github 账户，且里面有你需要部署的项目"></a>第一步, 登录到<a href="https://vercel.com/">vercel 网站</a>上，同时你需要有一个 github 账户，且里面有你需要部署的项目</h3><h3 id="第二步-关联上-github-的账户-Add-New-Project-选择要引入的项目，它会自动帮你部署"><a href="#第二步-关联上-github-的账户-Add-New-Project-选择要引入的项目，它会自动帮你部署" class="headerlink" title="第二步, 关联上 github 的账户,Add New Project,选择要引入的项目，它会自动帮你部署"></a>第二步, 关联上 github 的账户,Add New Project,选择要引入的项目，它会自动帮你部署</h3><h3 id="第三步-打开设置里的-Domains-Add-新的-domain-选择自己的域名-然后选第三个选项添加"><a href="#第三步-打开设置里的-Domains-Add-新的-domain-选择自己的域名-然后选第三个选项添加" class="headerlink" title="第三步, 打开设置里的 Domains, Add 新的 domain,选择自己的域名, 然后选第三个选项添加"></a>第三步, 打开设置里的 Domains, Add 新的 domain,选择自己的域名, 然后选第三个选项添加</h3><h3 id="第四步-到对应的域名购买的平台进行域名解析-解析完以后回到-Vercel-刷新它差不多就配置好了-现在就可以通过域名访问项目了"><a href="#第四步-到对应的域名购买的平台进行域名解析-解析完以后回到-Vercel-刷新它差不多就配置好了-现在就可以通过域名访问项目了" class="headerlink" title="第四步, 到对应的域名购买的平台进行域名解析, 解析完以后回到 Vercel 刷新它差不多就配置好了,现在就可以通过域名访问项目了"></a>第四步, 到对应的域名购买的平台进行域名解析, 解析完以后回到 Vercel 刷新它差不多就配置好了,现在就可以通过域名访问项目了</h3><h1 id="2-图片资源存在-github-上加载很慢"><a href="#2-图片资源存在-github-上加载很慢" class="headerlink" title="2.图片资源存在 github 上加载很慢"></a>2.图片资源存在 github 上加载很慢</h1><h3 id="1-使用-vercel-自带的-blob-数据库存储-将原本-cdn-代理的-github-图片地址换成-blob-里的-url"><a href="#1-使用-vercel-自带的-blob-数据库存储-将原本-cdn-代理的-github-图片地址换成-blob-里的-url" class="headerlink" title="1.使用 vercel 自带的 blob 数据库存储,将原本 cdn 代理的 github 图片地址换成 blob 里的 url"></a>1.使用 vercel 自带的 blob 数据库存储,将原本 cdn 代理的 github 图片地址换成 blob 里的 url</h3><div class="note success flat"><p>到这里教程就已圆满结束了，感谢你的浏览，thank you</p>
</div>


<style>
#web_bg{
  background: url(https://ttn1btctkretlayp.public.blob.vercel-storage.com/8baccd1254b9fce1@middle-fG8HbEsv084vMF4wjvnMt87pVVfaBt.jpg)!important;
  /*重新定义background会导致原有定位属性失效，所以也需要再声明一次加权的定位属性*/
  background-position: center !important;
  background-size: cover !important;
  background-repeat: no-repeat !important;
}
</style>


]]></content>
      <categories>
        <category>Hexo搭建</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>工具箱开发</title>
    <url>/2025/02/15/%E5%B7%A5%E5%85%B7%E7%AE%B1%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note success flat"><p>打算做一个工具箱，包含一些常用的开发工具还有不同职业使用的快捷工具集合<br><strong>暂时起名为 child gun(孩子的枪)</strong><br><strong>竞品是 dev toys</strong></p>
</div>
<h1 id="1-拟使用的技术栈"><a href="#1-拟使用的技术栈" class="headerlink" title="1.拟使用的技术栈"></a>1.拟使用的技术栈</h1><ul>
<li>Rust</li>
<li>Python</li>
<li>Go</li>
<li>Tauri</li>
<li>Vue3</li>
</ul>
<h1 id="2-打算完成的功能"><a href="#2-打算完成的功能" class="headerlink" title="2.打算完成的功能"></a>2.打算完成的功能</h1><h3 id="分类一-程序员工具"><a href="#分类一-程序员工具" class="headerlink" title="分类一:程序员工具"></a>分类一:程序员工具</h3><ul>
<li>二维码解码</li>
<li>二维码生成</li>
<li>json 解析</li>
<li>md5 加密解密</li>
<li>base64 加密解密</li>
<li>密码生成器</li>
<li>UUID 生成器</li>
<li>文本按需转换</li>
<li>js 压缩</li>
<li>js 格式化</li>
<li>图片尺寸修改</li>
</ul>
<h3 id="分类二-内容创作者工具包"><a href="#分类二-内容创作者工具包" class="headerlink" title="分类二:内容创作者工具包"></a>分类二:内容创作者工具包</h3><ul>
<li>标题生成器</li>
<li>敏感词检测</li>
<li>视频补帧</li>
<li>动态水印</li>
<li>热搜词云</li>
<li>平台发布器</li>
<li>情感温度计</li>
<li>阅读时长预估</li>
<li>ASMR 生成器</li>
</ul>
<h3 id="分类三-生活实用工具包"><a href="#分类三-生活实用工具包" class="headerlink" title="分类三: 生活实用工具包"></a>分类三: 生活实用工具包</h3><ul>
<li>红包外交官：根据亲戚关系/当地习俗推荐婚礼红包金额</li>
<li>生成各国求助短语二维码</li>
<li>电子木鱼</li>
<li>为视频添加老电视雪花屏/卡带掉帧效果</li>
<li>电子宠物</li>
<li>食物保质期追踪</li>
</ul>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>数组链表哈希表解析</title>
    <url>/2025/02/19/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8%E5%93%88%E5%B8%8C%E8%A1%A8%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><details class="folding-tag" cyan><summary> 动态数组代码实现 </summary>
              <div class='content'>
              <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArrayList</span>:</span><br><span class="line">    <span class="comment"># 默认容量</span></span><br><span class="line">    INIT_CAP = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, init_capacity=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.data = [<span class="literal">None</span>] * (init_capacity <span class="keyword">if</span> init_capacity <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="variable language_">self</span>.__class__.INIT_CAP)</span><br><span class="line">        <span class="variable language_">self</span>.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在末尾增加</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_last</span>(<span class="params">self, element</span>):</span><br><span class="line">        now_cap = <span class="built_in">len</span>(<span class="variable language_">self</span>.data)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.size == now_cap:</span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * now_cap)</span><br><span class="line">        <span class="variable language_">self</span>.data[<span class="variable language_">self</span>.size] =  element</span><br><span class="line">        <span class="variable language_">self</span>.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在开头增加</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_first</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="variable language_">self</span>.add(<span class="number">0</span>,element)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在中间插入</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, index, element</span>):</span><br><span class="line">        <span class="comment"># 先检查索引位置是否合理</span></span><br><span class="line">        <span class="variable language_">self</span>._check_element_index(index)</span><br><span class="line"></span><br><span class="line">        now_cap = <span class="built_in">len</span>(<span class="variable language_">self</span>.data)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.size == now_cap:</span><br><span class="line">            <span class="variable language_">self</span>._resize(<span class="number">2</span> * now_cap)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.size - <span class="number">1</span>, index - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="variable language_">self</span>.data[i + <span class="number">1</span>] = <span class="variable language_">self</span>.data[i]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.data[index] = element</span><br><span class="line">        <span class="variable language_">self</span>.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在末尾删除</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> NoSuchElementException</span><br><span class="line">        cap = <span class="built_in">len</span>(<span class="variable language_">self</span>.data)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.size == cap // <span class="number">4</span>:</span><br><span class="line">            <span class="variable language_">self</span>._resize(cap // <span class="number">2</span>)</span><br><span class="line">        delete_element = <span class="variable language_">self</span>.data[<span class="variable language_">self</span>.size - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.data[<span class="variable language_">self</span>.size - <span class="number">1</span>] = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.size -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> delete_element</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在开头删除</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.remove(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="variable language_">self</span>._check_element_index(index)</span><br><span class="line"></span><br><span class="line">        cap = <span class="built_in">len</span>(<span class="variable language_">self</span>.data)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.size == cap // <span class="number">4</span>:</span><br><span class="line">            <span class="variable language_">self</span>._resize(cap // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        delete_element = <span class="variable language_">self</span>.data[index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index + <span class="number">1</span>, <span class="variable language_">self</span>.size):</span><br><span class="line">            <span class="variable language_">self</span>.data[i - <span class="number">1</span>] = <span class="variable language_">self</span>.data[i]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.data[<span class="variable language_">self</span>.size - <span class="number">1</span>] = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.size -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> delete_element</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="variable language_">self</span>._check_element_index(index)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.data[index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 改</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, index, element</span>):</span><br><span class="line">        <span class="variable language_">self</span>._check_element_index(index)</span><br><span class="line"></span><br><span class="line">        old_val = <span class="variable language_">self</span>.data[index]</span><br><span class="line">        <span class="variable language_">self</span>.data[index] = element</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ola_val</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回数组的长度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 扩容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_resize</span>(<span class="params">self, cap</span>):</span><br><span class="line">        temp = [<span class="literal">None</span>] * cap</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.size):</span><br><span class="line">            temp[i] = <span class="variable language_">self</span>.data[i]</span><br><span class="line">        <span class="variable language_">self</span>.data = temp</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断数组是否为空:</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.size) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否是一个正确的索引</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_is_element_index</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &lt;= index &lt; <span class="variable language_">self</span>.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check_element_index</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._is_element_index(index):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">f&quot;Index: <span class="subst">&#123;index&#125;</span>, Size: <span class="subst">&#123;self.size&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否是一个可插入的位置</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_is_position_index</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &lt;= index &lt;= <span class="variable language_">self</span>.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check_position_index</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._is_position_index(index):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">f&quot;Index: <span class="subst">&#123;index&#125;</span>, Size: <span class="subst">&#123;self.size&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;size = <span class="subst">&#123;self.size&#125;</span>, cap = <span class="subst">&#123;<span class="built_in">len</span>(self.data)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage example</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    arr = MyArrayList(init_capacity=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加 5 个元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        arr.add_last(i)</span><br><span class="line"></span><br><span class="line">    arr.remove(<span class="number">3</span>)</span><br><span class="line">    arr.add(<span class="number">1</span>, <span class="number">9</span>)</span><br><span class="line">    arr.add_first(<span class="number">100</span>)</span><br><span class="line">    val = arr.remove_last()</span><br><span class="line"></span><br><span class="line">    arr.display()</span><br></pre></td></tr></table></figure>
              </div>
            </details>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>工具网站推荐</title>
    <url>/2025/02/18/%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note success modern"><p><a href="https://app.leonardo.ai/">leonardo.ai</a></p>
<p class='p red'>简介:ai绘画网站</p></div>
<div class="note success modern"><p><a href="https://labuladong.online/">labuladong 的算法平台</a></p>
<p class='p red'>简介:算法解析与笔记网站</p></div>
<div class="note success modern"><p><a href="https://statically.io/convert/">Statically</a></p>
<p class='p red'>简介:挂载github静态资源的网站</p></div>
<div class="note success modern"><p><a href="https://minhaskamal.github.io/DownGit/#/home">DownGit</a></p>
<p class='p red'>简介:分离下载github文件夹的网站</p></div>
<div class="note success modern"><p><a href="https://minhaskamal.github.io/DownGit/#/home">DownGit</a></p>
<p class='p red'>简介:分离下载github文件夹的网站</p></div>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>面试笔记(1)</title>
    <url>/2025/03/06/%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0(1)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note simple modern"><p><strong>该文章下的 mysql 题目取自网络,我是二次进行对应延伸的思考</strong></p>
</div>
<h1 id="1-Python-的-with-使用过吗，使用在哪些场景，原理是啥"><a href="#1-Python-的-with-使用过吗，使用在哪些场景，原理是啥" class="headerlink" title="1.Python 的 with 使用过吗，使用在哪些场景，原理是啥"></a>1.Python 的 with 使用过吗，使用在哪些场景，原理是啥</h1><p><strong>with 相当于一个上下文管理器，主要用于打开资源或者关闭资源的场景，比如文件读写，数据库连接等，在执行出现异常的情况下，也能正常的关闭资源,相当于 try-finally 的二次封装嘛，主要调用了</strong>enter<strong>和</strong>exit<strong>两种魔术方法，能正常关闭也是因为</strong>exit<strong>方法优先级高，</strong>exit<strong>有三个参数异常类型，异常值，异常回溯，比起 try-finally 语句更加的优雅。</strong></p>
<h1 id="2-Python-list-底部是内存是连续分布的吗"><a href="#2-Python-list-底部是内存是连续分布的吗" class="headerlink" title="2.Python list 底部是内存是连续分布的吗"></a>2.Python list 底部是内存是连续分布的吗</h1><p><strong>连续内存块存储的是引用，而不是真正的数据，真正的数据可能存放在内存的任意位置。因为比起 golang 或者 c++来说，我记得定义数组时候要定义数组的长度，而 python 没有就说明 python 底部存储真正的数据肯定不是连续分布的,预分配原则</strong></p>
<h1 id="3-说说-fastapi-依赖注入和装饰器有啥区别"><a href="#3-说说-fastapi-依赖注入和装饰器有啥区别" class="headerlink" title="3.说说 fastapi 依赖注入和装饰器有啥区别"></a>3.说说 fastapi 依赖注入和装饰器有啥区别</h1><p><strong>fastapi 依赖注入允许你在路由函数和子依赖中声明所需的依赖，通过 depends 函数实现，依赖可以是函数或者类或者其他对象，装饰器的参数是一个函数，允许你在不修改源码的情况下去增添额外的功能，依赖注入可以通过函数签名显式传递，装饰器可能需要你从 request.header 去提取，依赖注入可以独立的进行测试，装饰器需要去嵌到路由里，整个去测试</strong></p>
<h1 id="4-知道哈希表吗"><a href="#4-知道哈希表吗" class="headerlink" title="4.知道哈希表吗"></a>4.知道哈希表吗</h1><p><strong>哈希表是一个通过哈希函数将 key 映射到数组的索引，哈希表底层就可以理解为一个数组，因为数组索引是唯一的，所以哈希表的 key 也得是唯一的，如果有太多的数据可能会发生哈希冲突，一般冲突的解决方式有两个，一个是链地址，就每个数组存储一个链表，然后这样一层一层的搭下去，一种是开放寻址法，就是横向扩展，如果有冲突就寻到旁边的位置。平均时间复杂度是 O(1),因为哈希函数直接计算出索引，在数组中通过索引寻值就是这样</strong></p>
<h1 id="5-你项目中有写到将数据报表缓存到-redis-中，如何-redis-中没有找到对应的数据呢"><a href="#5-你项目中有写到将数据报表缓存到-redis-中，如何-redis-中没有找到对应的数据呢" class="headerlink" title="5.你项目中有写到将数据报表缓存到 redis 中，如何 redis 中没有找到对应的数据呢"></a>5.你项目中有写到将数据报表缓存到 redis 中，如何 redis 中没有找到对应的数据呢</h1><p><strong>我是这样的，如果在 redis 里没有找到，会直接访问数据库拿数据去生成一个新的报表，然后通过 celery 异步任务去生成一份最新的去缓存到 redis 中</strong></p>
<h1 id="6-mysql-有哪些索引类型"><a href="#6-mysql-有哪些索引类型" class="headerlink" title="6.mysql 有哪些索引类型"></a>6.mysql 有哪些索引类型</h1><p><strong>1.主键索引，一种特殊的普通索引</strong><br><strong>2.唯一索引，保证索引列的值是唯一的，但是可以是空值</strong><br><strong>3.普通索引</strong><br><strong>4.全文索引，用于文本搜索的索引</strong><br><strong>5.复合索引，就是多个列共同组成索引，查询时候按照最左前缀原则进行查询，否则可能会索引失效</strong></p>
<h1 id="7-redis-数据类型"><a href="#7-redis-数据类型" class="headerlink" title="7.redis 数据类型"></a>7.redis 数据类型</h1><p><strong>1.简单动态字符串</strong><br><strong>2.列表</strong><br><strong>3.集合</strong><br><strong>4.有序集合</strong><br><strong>5.哈希表</strong><br><strong>6.位图(bitmap)</strong><br><strong>7.地理空间位置</strong><br><strong>8.Stream</strong></p>
<h1 id="8-flask-和-fastapi-使用过吗，为啥会选用-fastapi"><a href="#8-flask-和-fastapi-使用过吗，为啥会选用-fastapi" class="headerlink" title="8.flask 和 fastapi 使用过吗，为啥会选用 fastapi"></a>8.flask 和 fastapi 使用过吗，为啥会选用 fastapi</h1><p><strong>1.第一个肯定是因为 fastapi 的性能更高，原生就支持异步，flask 需要 gevent 第三方库，而且还不好用</strong><br><strong>2.fatsapi 支持 api 文档，flask 需要去进行第三方库比如 swagger</strong><br><strong>3.fastapi 支持类型注解，结合 pydantic 能简便处理相应数据，flask 需要手动去处理 request.json 数据</strong><br><strong>4.fastapi 支持依赖注入，flask 要用到装饰器</strong></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>配置问题解决方案</title>
    <url>/2025/02/18/%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88(%E6%B1%87%E6%80%BB)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="aioredis-不兼容问题"><a href="#aioredis-不兼容问题" class="headerlink" title="aioredis 不兼容问题"></a>aioredis 不兼容问题</h1><p><strong>1.(解决方案)[<a href="https://blog.csdn.net/ViniJack/article/details/131809573">https://blog.csdn.net/ViniJack/article/details/131809573</a>]</strong></p>
<h1 id="rust-配置镜像源问题"><a href="#rust-配置镜像源问题" class="headerlink" title="rust 配置镜像源问题"></a>rust 配置镜像源问题</h1><p><strong>1.(字节跳动解决方案)[<a href="https://rsproxy.cn/">https://rsproxy.cn/</a>]</strong></p>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
</search>
